// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"hta_backend_2/models"
	"hta_backend_2/restapi/operations/category"
	"hta_backend_2/restapi/operations/entry"
	"hta_backend_2/restapi/operations/login"
)

// NewHtaAPI creates a new Hta instance
func NewHtaAPI(spec *loads.Document) *HtaAPI {
	return &HtaAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		CategoryDeleteCategoryIDHandler: category.DeleteCategoryIDHandlerFunc(func(params category.DeleteCategoryIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.DeleteCategoryID has not yet been implemented")
		}),
		EntryDeleteEntriesIDHandler: entry.DeleteEntriesIDHandlerFunc(func(params entry.DeleteEntriesIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation entry.DeleteEntriesID has not yet been implemented")
		}),
		CategoryDeleteMultiChoiceIDHandler: category.DeleteMultiChoiceIDHandlerFunc(func(params category.DeleteMultiChoiceIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.DeleteMultiChoiceID has not yet been implemented")
		}),
		CategoryDeleteSingleChoiceGroupIDHandler: category.DeleteSingleChoiceGroupIDHandlerFunc(func(params category.DeleteSingleChoiceGroupIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.DeleteSingleChoiceGroupID has not yet been implemented")
		}),
		CategoryDeleteSingleChoiceIDHandler: category.DeleteSingleChoiceIDHandlerFunc(func(params category.DeleteSingleChoiceIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.DeleteSingleChoiceID has not yet been implemented")
		}),
		CategoryGetCategoryHandler: category.GetCategoryHandlerFunc(func(params category.GetCategoryParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.GetCategory has not yet been implemented")
		}),
		CategoryGetCategoryCategoryIDMultiChoiceHandler: category.GetCategoryCategoryIDMultiChoiceHandlerFunc(func(params category.GetCategoryCategoryIDMultiChoiceParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.GetCategoryCategoryIDMultiChoice has not yet been implemented")
		}),
		CategoryGetCategoryCategoryIDSingleChoiceGroupHandler: category.GetCategoryCategoryIDSingleChoiceGroupHandlerFunc(func(params category.GetCategoryCategoryIDSingleChoiceGroupParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.GetCategoryCategoryIDSingleChoiceGroup has not yet been implemented")
		}),
		EntryGetEntriesHandler: entry.GetEntriesHandlerFunc(func(params entry.GetEntriesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation entry.GetEntries has not yet been implemented")
		}),
		LoginGetLoginHandler: login.GetLoginHandlerFunc(func(params login.GetLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation login.GetLogin has not yet been implemented")
		}),
		LoginGetOidcCallbackHandler: login.GetOidcCallbackHandlerFunc(func(params login.GetOidcCallbackParams) middleware.Responder {
			return middleware.NotImplemented("operation login.GetOidcCallback has not yet been implemented")
		}),
		CategoryGetSingleChoiceGroupGroupIDSingleChoiceHandler: category.GetSingleChoiceGroupGroupIDSingleChoiceHandlerFunc(func(params category.GetSingleChoiceGroupGroupIDSingleChoiceParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.GetSingleChoiceGroupGroupIDSingleChoice has not yet been implemented")
		}),
		LoginGetUserHandler: login.GetUserHandlerFunc(func(params login.GetUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation login.GetUser has not yet been implemented")
		}),
		CategoryPostCategoryHandler: category.PostCategoryHandlerFunc(func(params category.PostCategoryParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.PostCategory has not yet been implemented")
		}),
		CategoryPostCategoryCategoryIDMultiChoiceHandler: category.PostCategoryCategoryIDMultiChoiceHandlerFunc(func(params category.PostCategoryCategoryIDMultiChoiceParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.PostCategoryCategoryIDMultiChoice has not yet been implemented")
		}),
		CategoryPostCategoryCategoryIDSingleChoiceGroupHandler: category.PostCategoryCategoryIDSingleChoiceGroupHandlerFunc(func(params category.PostCategoryCategoryIDSingleChoiceGroupParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.PostCategoryCategoryIDSingleChoiceGroup has not yet been implemented")
		}),
		CategoryPostSingleChoiceGroupGroupIDSingleChoiceHandler: category.PostSingleChoiceGroupGroupIDSingleChoiceHandlerFunc(func(params category.PostSingleChoiceGroupGroupIDSingleChoiceParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.PostSingleChoiceGroupGroupIDSingleChoice has not yet been implemented")
		}),
		EntryPostUserHandler: entry.PostUserHandlerFunc(func(params entry.PostUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation entry.PostUser has not yet been implemented")
		}),
		CategoryPutCategoryIDHandler: category.PutCategoryIDHandlerFunc(func(params category.PutCategoryIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.PutCategoryID has not yet been implemented")
		}),
		EntryPutEntriesIDHandler: entry.PutEntriesIDHandlerFunc(func(params entry.PutEntriesIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation entry.PutEntriesID has not yet been implemented")
		}),
		CategoryPutMultiChoiceIDHandler: category.PutMultiChoiceIDHandlerFunc(func(params category.PutMultiChoiceIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.PutMultiChoiceID has not yet been implemented")
		}),
		CategoryPutSingleChoiceGroupIDHandler: category.PutSingleChoiceGroupIDHandlerFunc(func(params category.PutSingleChoiceGroupIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.PutSingleChoiceGroupID has not yet been implemented")
		}),
		CategoryPutSingleChoiceIDHandler: category.PutSingleChoiceIDHandlerFunc(func(params category.PutSingleChoiceIDParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation category.PutSingleChoiceID has not yet been implemented")
		}),

		// Applies when the "x-token" header is set
		BearerTokenAuth: func(token string) (*models.User, error) {
			return nil, errors.NotImplemented("api key auth (BearerToken) x-token from header param [x-token] has not yet been implemented")
		},
		OauthSecurityAuth: func(token string, scopes []string) (*models.User, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (OauthSecurity) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*HtaAPI Track Health Parameters */
type HtaAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BearerTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key x-token provided in the header
	BearerTokenAuth func(string) (*models.User, error)

	// OauthSecurityAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	OauthSecurityAuth func(string, []string) (*models.User, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// CategoryDeleteCategoryIDHandler sets the operation handler for the delete category ID operation
	CategoryDeleteCategoryIDHandler category.DeleteCategoryIDHandler
	// EntryDeleteEntriesIDHandler sets the operation handler for the delete entries ID operation
	EntryDeleteEntriesIDHandler entry.DeleteEntriesIDHandler
	// CategoryDeleteMultiChoiceIDHandler sets the operation handler for the delete multi choice ID operation
	CategoryDeleteMultiChoiceIDHandler category.DeleteMultiChoiceIDHandler
	// CategoryDeleteSingleChoiceGroupIDHandler sets the operation handler for the delete single choice group ID operation
	CategoryDeleteSingleChoiceGroupIDHandler category.DeleteSingleChoiceGroupIDHandler
	// CategoryDeleteSingleChoiceIDHandler sets the operation handler for the delete single choice ID operation
	CategoryDeleteSingleChoiceIDHandler category.DeleteSingleChoiceIDHandler
	// CategoryGetCategoryHandler sets the operation handler for the get category operation
	CategoryGetCategoryHandler category.GetCategoryHandler
	// CategoryGetCategoryCategoryIDMultiChoiceHandler sets the operation handler for the get category category ID multi choice operation
	CategoryGetCategoryCategoryIDMultiChoiceHandler category.GetCategoryCategoryIDMultiChoiceHandler
	// CategoryGetCategoryCategoryIDSingleChoiceGroupHandler sets the operation handler for the get category category ID single choice group operation
	CategoryGetCategoryCategoryIDSingleChoiceGroupHandler category.GetCategoryCategoryIDSingleChoiceGroupHandler
	// EntryGetEntriesHandler sets the operation handler for the get entries operation
	EntryGetEntriesHandler entry.GetEntriesHandler
	// LoginGetLoginHandler sets the operation handler for the get login operation
	LoginGetLoginHandler login.GetLoginHandler
	// LoginGetOidcCallbackHandler sets the operation handler for the get oidc callback operation
	LoginGetOidcCallbackHandler login.GetOidcCallbackHandler
	// CategoryGetSingleChoiceGroupGroupIDSingleChoiceHandler sets the operation handler for the get single choice group group ID single choice operation
	CategoryGetSingleChoiceGroupGroupIDSingleChoiceHandler category.GetSingleChoiceGroupGroupIDSingleChoiceHandler
	// LoginGetUserHandler sets the operation handler for the get user operation
	LoginGetUserHandler login.GetUserHandler
	// CategoryPostCategoryHandler sets the operation handler for the post category operation
	CategoryPostCategoryHandler category.PostCategoryHandler
	// CategoryPostCategoryCategoryIDMultiChoiceHandler sets the operation handler for the post category category ID multi choice operation
	CategoryPostCategoryCategoryIDMultiChoiceHandler category.PostCategoryCategoryIDMultiChoiceHandler
	// CategoryPostCategoryCategoryIDSingleChoiceGroupHandler sets the operation handler for the post category category ID single choice group operation
	CategoryPostCategoryCategoryIDSingleChoiceGroupHandler category.PostCategoryCategoryIDSingleChoiceGroupHandler
	// CategoryPostSingleChoiceGroupGroupIDSingleChoiceHandler sets the operation handler for the post single choice group group ID single choice operation
	CategoryPostSingleChoiceGroupGroupIDSingleChoiceHandler category.PostSingleChoiceGroupGroupIDSingleChoiceHandler
	// EntryPostUserHandler sets the operation handler for the post user operation
	EntryPostUserHandler entry.PostUserHandler
	// CategoryPutCategoryIDHandler sets the operation handler for the put category ID operation
	CategoryPutCategoryIDHandler category.PutCategoryIDHandler
	// EntryPutEntriesIDHandler sets the operation handler for the put entries ID operation
	EntryPutEntriesIDHandler entry.PutEntriesIDHandler
	// CategoryPutMultiChoiceIDHandler sets the operation handler for the put multi choice ID operation
	CategoryPutMultiChoiceIDHandler category.PutMultiChoiceIDHandler
	// CategoryPutSingleChoiceGroupIDHandler sets the operation handler for the put single choice group ID operation
	CategoryPutSingleChoiceGroupIDHandler category.PutSingleChoiceGroupIDHandler
	// CategoryPutSingleChoiceIDHandler sets the operation handler for the put single choice ID operation
	CategoryPutSingleChoiceIDHandler category.PutSingleChoiceIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *HtaAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *HtaAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *HtaAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *HtaAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *HtaAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *HtaAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *HtaAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *HtaAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *HtaAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the HtaAPI
func (o *HtaAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerTokenAuth == nil {
		unregistered = append(unregistered, "XTokenAuth")
	}
	if o.OauthSecurityAuth == nil {
		unregistered = append(unregistered, "OauthSecurityAuth")
	}

	if o.CategoryDeleteCategoryIDHandler == nil {
		unregistered = append(unregistered, "category.DeleteCategoryIDHandler")
	}
	if o.EntryDeleteEntriesIDHandler == nil {
		unregistered = append(unregistered, "entry.DeleteEntriesIDHandler")
	}
	if o.CategoryDeleteMultiChoiceIDHandler == nil {
		unregistered = append(unregistered, "category.DeleteMultiChoiceIDHandler")
	}
	if o.CategoryDeleteSingleChoiceGroupIDHandler == nil {
		unregistered = append(unregistered, "category.DeleteSingleChoiceGroupIDHandler")
	}
	if o.CategoryDeleteSingleChoiceIDHandler == nil {
		unregistered = append(unregistered, "category.DeleteSingleChoiceIDHandler")
	}
	if o.CategoryGetCategoryHandler == nil {
		unregistered = append(unregistered, "category.GetCategoryHandler")
	}
	if o.CategoryGetCategoryCategoryIDMultiChoiceHandler == nil {
		unregistered = append(unregistered, "category.GetCategoryCategoryIDMultiChoiceHandler")
	}
	if o.CategoryGetCategoryCategoryIDSingleChoiceGroupHandler == nil {
		unregistered = append(unregistered, "category.GetCategoryCategoryIDSingleChoiceGroupHandler")
	}
	if o.EntryGetEntriesHandler == nil {
		unregistered = append(unregistered, "entry.GetEntriesHandler")
	}
	if o.LoginGetLoginHandler == nil {
		unregistered = append(unregistered, "login.GetLoginHandler")
	}
	if o.LoginGetOidcCallbackHandler == nil {
		unregistered = append(unregistered, "login.GetOidcCallbackHandler")
	}
	if o.CategoryGetSingleChoiceGroupGroupIDSingleChoiceHandler == nil {
		unregistered = append(unregistered, "category.GetSingleChoiceGroupGroupIDSingleChoiceHandler")
	}
	if o.LoginGetUserHandler == nil {
		unregistered = append(unregistered, "login.GetUserHandler")
	}
	if o.CategoryPostCategoryHandler == nil {
		unregistered = append(unregistered, "category.PostCategoryHandler")
	}
	if o.CategoryPostCategoryCategoryIDMultiChoiceHandler == nil {
		unregistered = append(unregistered, "category.PostCategoryCategoryIDMultiChoiceHandler")
	}
	if o.CategoryPostCategoryCategoryIDSingleChoiceGroupHandler == nil {
		unregistered = append(unregistered, "category.PostCategoryCategoryIDSingleChoiceGroupHandler")
	}
	if o.CategoryPostSingleChoiceGroupGroupIDSingleChoiceHandler == nil {
		unregistered = append(unregistered, "category.PostSingleChoiceGroupGroupIDSingleChoiceHandler")
	}
	if o.EntryPostUserHandler == nil {
		unregistered = append(unregistered, "entry.PostUserHandler")
	}
	if o.CategoryPutCategoryIDHandler == nil {
		unregistered = append(unregistered, "category.PutCategoryIDHandler")
	}
	if o.EntryPutEntriesIDHandler == nil {
		unregistered = append(unregistered, "entry.PutEntriesIDHandler")
	}
	if o.CategoryPutMultiChoiceIDHandler == nil {
		unregistered = append(unregistered, "category.PutMultiChoiceIDHandler")
	}
	if o.CategoryPutSingleChoiceGroupIDHandler == nil {
		unregistered = append(unregistered, "category.PutSingleChoiceGroupIDHandler")
	}
	if o.CategoryPutSingleChoiceIDHandler == nil {
		unregistered = append(unregistered, "category.PutSingleChoiceIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *HtaAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *HtaAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "BearerToken":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.BearerTokenAuth(token)
			})

		case "OauthSecurity":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.OauthSecurityAuth(token, scopes)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *HtaAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *HtaAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *HtaAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *HtaAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the hta API
func (o *HtaAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *HtaAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/category/{id}"] = category.NewDeleteCategoryID(o.context, o.CategoryDeleteCategoryIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/entries/{id}"] = entry.NewDeleteEntriesID(o.context, o.EntryDeleteEntriesIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/multi_choice/{id}"] = category.NewDeleteMultiChoiceID(o.context, o.CategoryDeleteMultiChoiceIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/single_choice_group/{id}"] = category.NewDeleteSingleChoiceGroupID(o.context, o.CategoryDeleteSingleChoiceGroupIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/single_choice/{id}"] = category.NewDeleteSingleChoiceID(o.context, o.CategoryDeleteSingleChoiceIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category"] = category.NewGetCategory(o.context, o.CategoryGetCategoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/{category_id}/multi_choice"] = category.NewGetCategoryCategoryIDMultiChoice(o.context, o.CategoryGetCategoryCategoryIDMultiChoiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/{category_id}/single_choice_group"] = category.NewGetCategoryCategoryIDSingleChoiceGroup(o.context, o.CategoryGetCategoryCategoryIDSingleChoiceGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/entries"] = entry.NewGetEntries(o.context, o.EntryGetEntriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/login"] = login.NewGetLogin(o.context, o.LoginGetLoginHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/oidc_callback"] = login.NewGetOidcCallback(o.context, o.LoginGetOidcCallbackHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/single_choice_group/{group_id}/single_choice"] = category.NewGetSingleChoiceGroupGroupIDSingleChoice(o.context, o.CategoryGetSingleChoiceGroupGroupIDSingleChoiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = login.NewGetUser(o.context, o.LoginGetUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category"] = category.NewPostCategory(o.context, o.CategoryPostCategoryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category/{category_id}/multi_choice"] = category.NewPostCategoryCategoryIDMultiChoice(o.context, o.CategoryPostCategoryCategoryIDMultiChoiceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category/{category_id}/single_choice_group"] = category.NewPostCategoryCategoryIDSingleChoiceGroup(o.context, o.CategoryPostCategoryCategoryIDSingleChoiceGroupHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/single_choice_group/{group_id}/single_choice"] = category.NewPostSingleChoiceGroupGroupIDSingleChoice(o.context, o.CategoryPostSingleChoiceGroupGroupIDSingleChoiceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user"] = entry.NewPostUser(o.context, o.EntryPostUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/category/{id}"] = category.NewPutCategoryID(o.context, o.CategoryPutCategoryIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/entries/{id}"] = entry.NewPutEntriesID(o.context, o.EntryPutEntriesIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/multi_choice/{id}"] = category.NewPutMultiChoiceID(o.context, o.CategoryPutMultiChoiceIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/single_choice_group/{id}"] = category.NewPutSingleChoiceGroupID(o.context, o.CategoryPutSingleChoiceGroupIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/single_choice/{id}"] = category.NewPutSingleChoiceID(o.context, o.CategoryPutSingleChoiceIDHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *HtaAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *HtaAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *HtaAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *HtaAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *HtaAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
