// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pl33/hta-backend/models"
)

// GetSingleChoiceGroupGroupIDSingleChoiceOKCode is the HTTP code returned for type GetSingleChoiceGroupGroupIDSingleChoiceOK
const GetSingleChoiceGroupGroupIDSingleChoiceOKCode int = 200

/*
GetSingleChoiceGroupGroupIDSingleChoiceOK List of single choices

swagger:response getSingleChoiceGroupGroupIdSingleChoiceOK
*/
type GetSingleChoiceGroupGroupIDSingleChoiceOK struct {

	/*
	  In: Body
	*/
	Payload []*models.CategorySingleChoice `json:"body,omitempty"`
}

// NewGetSingleChoiceGroupGroupIDSingleChoiceOK creates GetSingleChoiceGroupGroupIDSingleChoiceOK with default headers values
func NewGetSingleChoiceGroupGroupIDSingleChoiceOK() *GetSingleChoiceGroupGroupIDSingleChoiceOK {

	return &GetSingleChoiceGroupGroupIDSingleChoiceOK{}
}

// WithPayload adds the payload to the get single choice group group Id single choice o k response
func (o *GetSingleChoiceGroupGroupIDSingleChoiceOK) WithPayload(payload []*models.CategorySingleChoice) *GetSingleChoiceGroupGroupIDSingleChoiceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get single choice group group Id single choice o k response
func (o *GetSingleChoiceGroupGroupIDSingleChoiceOK) SetPayload(payload []*models.CategorySingleChoice) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSingleChoiceGroupGroupIDSingleChoiceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.CategorySingleChoice, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*
GetSingleChoiceGroupGroupIDSingleChoiceDefault Error

swagger:response getSingleChoiceGroupGroupIdSingleChoiceDefault
*/
type GetSingleChoiceGroupGroupIDSingleChoiceDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSingleChoiceGroupGroupIDSingleChoiceDefault creates GetSingleChoiceGroupGroupIDSingleChoiceDefault with default headers values
func NewGetSingleChoiceGroupGroupIDSingleChoiceDefault(code int) *GetSingleChoiceGroupGroupIDSingleChoiceDefault {
	if code <= 0 {
		code = 500
	}

	return &GetSingleChoiceGroupGroupIDSingleChoiceDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get single choice group group ID single choice default response
func (o *GetSingleChoiceGroupGroupIDSingleChoiceDefault) WithStatusCode(code int) *GetSingleChoiceGroupGroupIDSingleChoiceDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get single choice group group ID single choice default response
func (o *GetSingleChoiceGroupGroupIDSingleChoiceDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get single choice group group ID single choice default response
func (o *GetSingleChoiceGroupGroupIDSingleChoiceDefault) WithPayload(payload *models.Error) *GetSingleChoiceGroupGroupIDSingleChoiceDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get single choice group group ID single choice default response
func (o *GetSingleChoiceGroupGroupIDSingleChoiceDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSingleChoiceGroupGroupIDSingleChoiceDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
