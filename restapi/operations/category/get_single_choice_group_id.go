// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"hta_backend_2/models"
)

// GetSingleChoiceGroupIDHandlerFunc turns a function with the right signature into a get single choice group ID handler
type GetSingleChoiceGroupIDHandlerFunc func(GetSingleChoiceGroupIDParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSingleChoiceGroupIDHandlerFunc) Handle(params GetSingleChoiceGroupIDParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetSingleChoiceGroupIDHandler interface for that can handle valid get single choice group ID params
type GetSingleChoiceGroupIDHandler interface {
	Handle(GetSingleChoiceGroupIDParams, *models.User) middleware.Responder
}

// NewGetSingleChoiceGroupID creates a new http.Handler for the get single choice group ID operation
func NewGetSingleChoiceGroupID(ctx *middleware.Context, handler GetSingleChoiceGroupIDHandler) *GetSingleChoiceGroupID {
	return &GetSingleChoiceGroupID{Context: ctx, Handler: handler}
}

/*
	GetSingleChoiceGroupID swagger:route GET /single_choice_group/{id} category getSingleChoiceGroupId

GetSingleChoiceGroupID get single choice group ID API
*/
type GetSingleChoiceGroupID struct {
	Context *middleware.Context
	Handler GetSingleChoiceGroupIDHandler
}

func (o *GetSingleChoiceGroupID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSingleChoiceGroupIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
